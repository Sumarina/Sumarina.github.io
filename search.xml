<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[美女]]></title>
    <url>%2F2021%2F04%2F12%2F%E7%BE%8E%E5%A5%B3%2F</url>
    <content type="text"><![CDATA[打开电影《忠犬八公物语》，看到阿卡在诞下几只小狗的场景，顿时想到以前家里养的一只狗，它叫美女。 它来我们家的时候，其实还有另一只狗陪着一起来的。当然，另一只狗叫帅哥，可惜没过多久帅哥就不在了。 第一次见到美女，就觉得很喜欢，每次它都带着泪汪汪的眼神看着我。 我每次喝完酸奶，都会把酸奶盒子拆开扔给美女舔酸奶盖。 后来再见到美女的时候，它肚子超级大，我就知道美女肯定怀了狗宝宝。没过多久它就生下来就只狗崽子，谁都不允许靠近，我只能远远的看着那就只小狗崽。 后来妈妈把其中一只小狗送给隔壁，结果第二天早上，妈妈跑过来跟我说“美女趁着晚上跑到隔壁去把小狗崽又衔回来里，把它藏在小房间里面”。 心里猛的一惊，想必美女也是不舍得骨肉分离吧。它宁愿冒着被骂的风险，也要去把它自己的小狗崽找回来。 后来的后来，美女越来越老了，经常听到弟弟说带美女去看病了，我就知道美女可能也活不了多久了吧。 那年夏天是我见到美女的最后一次，我依旧会把酸奶给美女喝，但是我是整盒都给它喝，我受不了美女泪汪汪的看着我，有次因为我把酸奶扔远了，被别的狗抢走了，美女跑上去和那只狗撕咬，我想美女肯定很生气，我竟然会害怕它不理我。 我唤回美女，又重新拿一盒新的酸奶给它，算是我对美女的补偿，我对不起它。 “狗和猫最大的不同是：狗你只要养它三天就会对你忠心一辈子。” 后来，美女不在了，它太老了，弟弟把它埋到了山上。 死亡不是终点，遗忘才是。除非我忘了，否则美女一直活在我的心里。 现在也不敢养小动物了，受不了它们离开我的事实。]]></content>
      <categories>
        <category>心情</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无处宣泄的情感]]></title>
    <url>%2F2021%2F03%2F27%2F%E6%97%A0%E5%A4%84%E5%AE%A3%E6%B3%84%E7%9A%84%E6%83%85%E6%84%9F%2F</url>
    <content type="text"><![CDATA[我妈说我很坚强，从未见我哭过。我并未附和。我心里是真的难受，倒不是因为这句“从未见我哭过”。我素来不爱在人前流泪，也养成了打碎了牙往肚子里吞的性格。我爱哭，经常哭，曾经因为同事离职流着泪着走回家，会因为别人一句无心的话流泪，会为自己的无能流泪，会因为思念某人流泪，会觉着孤单流泪，总之各种各有流泪的理由。今天在家门口碰到一个大男人在啜泣，我不知道他为什么啜泣，但大家都是不愿在人前流泪。只能背后默默的抹泪。心里很难过，却不知道怎么安慰自己，亦或许我本就不知道如何安慰自己。只能通过玩游戏转移注意力。可是玩完游戏又接着悲伤。每次站在阳台上晾衣服，总是担心自己一时冲动从这 26 楼跳下去。每次过马路，总是想着被撞了应该也就解脱了吧。不敢和任何人说自己的心事，也不想借此打扰别人。我想放弃了。我觉得难受。我也不知道该怎么办了。]]></content>
      <categories>
        <category>心情</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[七月半,从心出发!]]></title>
    <url>%2F2020%2F07%2F03%2F%E4%B8%83%E6%9C%88%E5%8D%8A-%E4%BB%8E%E5%BF%83%E5%87%BA%E5%8F%91%2F</url>
    <content type="text"><![CDATA[自从不工作开始，每天都是昏昏沉沉的。脑袋成天都是晕乎乎的状态，我也不知道自己这种状态会持续多久。自杀的念头不断的冒出来，昨天晚上拿着枕头猛的盖在头上，想试试那种窒息的感觉，很久过后拿开了枕头，猛的大口喘气，我还是想活着的不是吗？要不然为什么会大口喘气呢？很想找个人说话，但是无从说起。拿起手机给卷毛发了条消息，发了“卷毛”两个字，卷毛问我怎么啦？隔了很久回了他一句“来打游戏”，卷毛说“好，我开电脑”。一直想不明白为什么自己一旦陷入某种情感就再也跳不出来了。很想摆脱这样的负面情绪。一直都是个很敏感没有自信的人，总以为自己很坚强，殊不知是这样的不堪一击。有时候总想逃避这一切，一跃而下可能就不会有这么多的烦恼了吧。可我是一个没有勇气这么干的人，只能苟延残喘。睁眼闭眼一天就过去了，每天早上升起的太阳对我而言并没有太多新鲜感，只是会觉得这个世界很吵闹。不知道为什么我会觉得自己能够从心出发，从新开始，这一次的加油打气能维持多久呢？一天？一周？一旦负面情绪上来所有事情就会抛之脑后，一心一意的想着如何逃避生活逃避世界吧。嫂子说我就是想太多了，她其实不太能理解我这种无法控制自己的情绪。我也不奢望有人能理解，人与人之间的情感大抵都是不同的吧。]]></content>
      <categories>
        <category>心情</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入了解webpack配置（一）]]></title>
    <url>%2F2020%2F03%2F27%2F%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3webpack%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[webpack 是什么webpack 是一个静态资源构建工具，主要是把我们的应用程序所需要的模块构建成一个或者多个 bundles。在构建过程中，webpack 会递归循环创建依赖关系图。 webpack 的核心概念 entry（入口）：指示 webpack 构建的入口文件，也就是构建依赖关系图的开始。（默认值为./src） output（输出）：输出构建之后的 bundles（可以修改输出的文件名，默认值为./dist） loader:将 webpack 不能识别的模块转为能够识别的有效模块 plugins(插件)：在 webpack 整个构建过程中注入扩展逻辑来改变构建结果或做你想要做的事情 demo 配置使用 webpack 必须安装 webpack 和 webpack-cli（webpack 使用的是 4.x 的版本）在官网很明确的指出 webpack v4.0.0 后的版本是开箱即用。但仍还是高度可配置的。在 src 文件新建一个 index.js 文件【webpack 默认入口，如若放其他目录，需修改配置文件中 entry 的值】。index 文件的内容如下： 12345const newArr = [ ...[1, 2, 3].map(value =&gt; &#123; return value * 2; &#125;)]; 执行npx webpack --mode=development (未在 package.json 中配置命令,直接使用 npx 代替 npm,在 npm 5.2 之后的版本增加 npx 命令，方便用户能够调用项目内部安装的模块)构建完成后 index 里面的内容变成如下代码： 1234567/******/ (&#123;/*! no static exports found */(function(module, exports) &#123;eval("const newArr = [\n ...[1, 2, 3].map(value =&gt; &#123;\n return value * 2;\n &#125;)\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/YjYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBuZXdBcnIgPSBbXG4gIC4uLlsxLCAyLCAzXS5tYXAodmFsdWUgPT4ge1xuICAgIHJldHVybiB2YWx1ZSAqIDI7XG4gIH0pXG5dO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n"); &#125;)&#125;); index 中的内容并没有如我们所想转化为低版本的代码，这里就需要babel-loader安装 babel-loader 以及相关依赖@babel/core、@babel/preset-env @babel/plugin-transform-runtime、@babel/runtime、@babel/runtime-corejs3。新建 webpack.config.js 文件。 1234567891011121314151617181920module: &#123; rules: [ &#123; test: /\.jsx?$/, use: ['babel-loader'], options: &#123; presets: ['@babel/preset-env'], plugins: [ [ '@babel/plugin-transform-runtime', &#123; corejs: 3 &#125; ] ] &#125;, exclude: /node_modules/ //排除node_modules文件 &#125; ]&#125; 也可以新建.babelrc 文件，添加配置。 1234567891011&#123; "presets": ["@babel/preset-env"], "plugins": [ [ "@babel/plugin-transform-runtime", &#123; "corejs": 3 &#125; ] ]&#125; 配置完成后，再次执行构建命令，输出内容如下： 1eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_corejs3_core_js_stable_instance_map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime-corejs3/core-js-stable/instance/map */ \"./node_modules/_@babel_runtime-corejs3@7.9.2@@babel/runtime-corejs3/core-js-stable/instance/map.js\");\n/* harmony import */ var _babel_runtime_corejs3_core_js_stable_instance_map__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs3_core_js_stable_instance_map__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_corejs3_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime-corejs3/helpers/toConsumableArray */ \"./node_modules/_@babel_runtime-corejs3@7.9.2@@babel/runtime-corejs3/helpers/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_corejs3_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs3_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nvar _context;\n\nvar newArr = _babel_runtime_corejs3_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(_babel_runtime_corejs3_core_js_stable_instance_map__WEBPACK_IMPORTED_MODULE_0___default()(_context = [1, 2, 3]).call(_context, function (value) &#123;\n return value * 2;\n&#125;));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/YjYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBuZXdBcnIgPSBbXG4gIC4uLlsxLCAyLCAzXS5tYXAodmFsdWUgPT4ge1xuICAgIHJldHVybiB2YWx1ZSAqIDI7XG4gIH0pXG5dO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFFQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.js\n"); 现在成功构建成低版本的代码。webpack 自身只理解 JavaScript，并不能够有效的识别其他文件，如.css以及图片。这里就需要安装style-loader、css-loader、postcss-loader、less-loader。安装完成后，在 webpack.config.js 中配置，代码如下： 12345678910111213141516171819202122232425module: &#123; rules: [ &#123; test: /\.(le|c)ss$/,// use: [ 'style-loader', 'css-loader', &#123; loader: 'postcss-loader', options: &#123; plugins: function() &#123; return [ require('autoprefixer')(&#123; overrideBrowserslist: ['&gt;0.25%', 'not dead'] &#125;) ]; &#125; &#125; &#125;, 'less-loader' ], exclude: /node_module/ &#125; ] &#125; style-loader 动态创建 style 标签将 css 插入到 head 中。css-loader 负责处理 @import 等语句。postcss-loader 和 autoprefixer，自动生成浏览器兼容性前缀。less-loader 负责处理编译 .less 文件,将其转为 css。loader 的执行顺序是从右往左，执行顺序 less-loader-&gt;postcss-loader-&gt;css-loader-&gt;style-loader。 1234@color: red;body &#123; background-color: @color;&#125; 构建完成后如上样式代码会输出如下background-color: red 1eval("// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/_css-loader@3.4.2@css-loader/dist/runtime/api.js */ \"./node_modules/_css-loader@3.4.2@css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, \"body &#123;\\n background-color: red;\\n&#125;\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvX2Nzcy1sb2FkZXJAMy40LjJAY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9fcG9zdGNzcy1sb2FkZXJAMy4wLjBAcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPyEuL25vZGVfbW9kdWxlcy9fbGVzcy1sb2FkZXJANS4wLjBAbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zcmMvY3NzL21haW4ubGVzcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jc3MvbWFpbi5sZXNzP2VhMTEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvX2Nzcy1sb2FkZXJAMy40LjJAY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImJvZHkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xcbn1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/_css-loader@3.4.2@css-loader/dist/cjs.js!./node_modules/_postcss-loader@3.0.0@postcss-loader/src/index.js?!./node_modules/_less-loader@5.0.0@less-loader/dist/cjs.js!./src/css/main.less\n"); 同样，如果我们在 css 中使用了 image，那 webpack 无法识别怎么处理？那么我们需要安装url-loader，注意url-loader依赖file-loader,安装完 url-loader 和 file-loader 后，继续配置。 12345678910111213141516171819module: &#123; rules: [ &#123; test: /\.(png|jpg|gif|jpeg|webp|svg|eot|ttf|woff|woff2)$/, use: [ &#123; loader: 'url-loader', options: &#123; outputPath: 'assets', limit: 10240,//设置最大10kb，小于10kb的资源会转化为base64，大于10kb的资源则会拷贝到dist文件下 esModule: false, name: '[name]_[hash:6].[ext]' &#125; &#125; ], exclude: /node_module/ &#125; ] &#125; 至此，算是完成了一些基本配置。]]></content>
      <categories>
        <category>程序员</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20191030随笔]]></title>
    <url>%2F2019%2F10%2F30%2F20191030%E9%9A%8F%E7%AC%94%2F</url>
    <content type="text"><![CDATA[总是想写点什么，但又有一种无从下笔的感觉。昨天又梦到又回去北京工作了。一直都在思考回家是不是一种错误的选择？可是既然已经选择已经走了也没办法回头了吧。或许我后悔的点并不是因为北京，而是一些人再也见不到了吧。一直努力暗示自己没错，走了就走了。记忆从什么时候开始下降了呢？最近格外严重。想不起来以前的事了。五年了，竟然在北京呆了五年，我却只记得刚去北京的事，后面的事一点都想不起来了。曾经，每天夜里躲在被窝偷偷哭，眼泪流干，整晚都不睡觉，或许根本就不想睡。可能眼泪真的流完了吧。现在想哭都哭不出来了。人也变得冷漠无情些了。或许我已喜欢这样的自己了。以后也会继续这样吧。]]></content>
      <categories>
        <category>心情</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[不理解的一瞬间]]></title>
    <url>%2F2019%2F06%2F08%2F%E4%B8%8D%E7%90%86%E8%A7%A3%E7%9A%84%E4%B8%80%E7%9E%AC%E9%97%B4%2F</url>
    <content type="text"><![CDATA[“人如果不自私，就无法活下去，哪里有软弱，哪里就有谎言。”我不知道别人家的父母是否也如我的父母这般，能轻而易举的说出“不想活了”这样的词来威胁子女而达到自己的目的。命是自己的，为什么总是要用自己的命去威胁自己的孩子呢？难道到现在还不明白孩子从一出生开始就是一个独立的生命体，不应该再被控制了吗？留守儿童长大的我，对父母的感情有多深，我自己都不知道。习惯了一个人面对所有的事，习惯自己做决定。我也不知道如何去爱你们，因为你们不曾教过我。你们给我的只有无止境的争吵和冷暴力。所以当你说出“你不听话我都不想活了”这样的话，真的很反感。直到现在，你们都不知道如何为人父母。只知道把自己的意愿强加给子女，逼迫他们听你们的话。这样的生活到底能维持多久呢？我不奢望你们能理解我，但不要自以为是的了解我。有时候真的很想自私的不去考虑你们的感受，能痛快的把你们说教一番。啊哈哈哈哈哈哈哈。。。]]></content>
      <categories>
        <category>心情</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我和卷毛的故事]]></title>
    <url>%2F2019%2F01%2F23%2F%E6%88%91%E5%92%8C%E5%8D%B7%E6%AF%9B%E7%9A%84%E6%95%85%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[卷毛是我的大学同学。因为他烫了一头卷卷的头发，所以我们都叫他卷毛。他不喜欢别人摸他的头发，而我却总是故意去揉他的头发。“头可断血可流，发型不能乱”。因此卷毛每次都很生气，因为我搞乱了他的发型。刚上大学那会，他坐我后面，老师第一次点名,我听到他的名字在心里笑了好久，总是觉得很奇怪，为什么会叫这个名字呢？一直到现在都没能明白，因为卷毛不肯告诉我真正的原因。我本是个不太主动的人，断不可能主动跟他熟念起来。至于怎么熟悉的，却始终想不起来了，感觉这段记忆不存在一样。或许我们一直都很熟悉。他经常逼我给他带午饭，或许我是自愿的，那时的我心里还是有一丝小期许的。上机课他会让我坐他旁边，我会因为害羞故意错开坐。一直记得他说如果我愿意，他会一直陪我。可能他忘了，我却一直记着。他喜欢玩英雄杀，所以我也开始学着玩，还有另外一个同学。我们三个经常通宵玩游戏，可是他却嫌弃我很菜。我努力让自己变的厉害些。可当我游戏玩的很厉害时，我们都毕业了。我们都不再玩这款游戏了。临近毕业之际，我们经常约着其他同学一起去外面棋牌室通宵打麻将，他一直赢，而我却一直输。后来有个培训机构来学校招生，我报名了，他陪我一起报名。后来我不想去，女人是善变的这句话真没错。我拉着卷毛一起去培训机构要钱。我嘴笨，不知道怎么撒谎。他跟那个负责人谈了很久，总算把我俩的钱要回来了。实习的时候几个同学一起在外面租房子，一起上班。我和卷毛在一个公司，本以为我们会合作的很好，可是他却一直吼我。我们会经常吵架，或者说是他经常吼我，我只是默默承受，偷偷抹眼泪而已。他打我了，他以为我会像以前那样不在乎，可是我却什么都不想说。我在心里默默发誓，打死不跟他来往。他可能知道自己错了，主动让我去他房间拿水果吃。要知道他以前可不会让我们进他房间的。我心软了。我突然原谅他了。所以真那个时候的自己太贱了。毕业后，他留在了武汉。不知道当时我为什么没有留在武汉，如果我也在，可能后来的故事会不一样。可我走了。我说我最讨厌这个地方，打死都不想回来。不知道在当时的卷毛听着会是个什么样的感受。年少轻狂，大家做错了很多事。一开始错过就再也回不去了。或许当时离开是因为想逃避一些事。胆小懦弱的我，不敢主动迈出第一步，所以这个故事就不会有结局了。]]></content>
      <categories>
        <category>心情</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nodejs从入门到放弃（三）]]></title>
    <url>%2F2018%2F12%2F20%2Fnodejs%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[如果读过了我的从入门到放弃的第二篇，就会对 Node 的异步 I/O 有所了解，接下来我要说的是 Node 中还存在一些与异步 I/O 无关的异步 API。 定时器setInterval()和setTimeout()与浏览器中的 API 是一致的，分别用于单次和多次定时执行任务。他们实现的原理与异步 I/O 毕竟类似，只是没有线程池的参与。调用setInterval()huo3setTimeout()创建的定时器会被插入到定时器观察者内部的红黑树中，每次 Tick 执行，就会从红黑树中取出定时器对象，检查是否超过定时时间，如果超过，则形成一个事件，回调函数立即执行。看图： process.nextTick()由于事件循环的特点，定时器的精确度是不够的，比如某个任务耗时许久，下个任务原本已经到了执行事件却因为这个耗时任务而不能立即执行。再加上定时器是动用红黑树，创建定时器对象和迭代等操作，毕竟浪费性能。相对而言，process.nextTick()的操作相对较为轻量，每次调用process.nextTick()都是将回调函数放入队列，下一轮 tick 取出执行。 setImmediate()setImmediate()也是将回调函数延迟执行，在 Nodev0.9.1 之前，setImmediate()还没实现呢，是通过process.nextTick()来完成。 1234567process.nextTick(function()&#123; console.log(&quot;延迟执行&quot;);&#125;);console.log(&quot;正常输出&quot;);//result正常输出延迟执行 1234567setImmediate(function()&#123; console.log(&quot;延迟执行&quot;);&#125;);console.log(&quot;正常输出&quot;);//result正常输出延迟执行 从以上两段代码看，结果一样，但实际它们还是有区别的。 1234567891011setImmediate(function()&#123; console.log(&quot;setImmediate延迟执行&quot;);&#125;);process.nextTick(function()&#123; console.log(&quot;nextTick延迟执行&quot;);&#125;);console.log(&quot;正常输出&quot;);//result正常输出nextTick延迟执行setImmediate延迟执行 从结果可以看出process.nextTick()的优先级高于setImmediate()，是因为事件循环对观察者的检查是有先后顺序的（ps:继续往下看会详细写这块内容。）process.nextTick()的回调函数是存在一个数组，setImmediate()的结果是保存在链表中。在行为上，process.nextTick()在每轮循环会将数组中的回调函数全部执行完，setImmediate()在每轮循环中执行链表中的一个回调函数。用一段代码来证明： 123456789101112131415161718192021222324process.nextTick(function()&#123; console.log(&quot;next tick....1&quot;);&#125;);process.nextTick(function()&#123; console.log(&quot;next tick....2&quot;);&#125;);setImmediate(function()&#123; console.log(&quot;immediate.....1&quot;); process.nextTick(function()&#123; console.log(&quot;next tick....3&quot;); &#125;);&#125;)setImmediate(function()&#123; console.log(&quot;immediate.....2&quot;);&#125;)//resultnext tick....1next tick....2immediate.....1next tick....3immediate.....2 从结果可以看出第一个setImmediate()的回调函数执行后，并没有立即执行第二个，而是进入下一轮循环，再次优先调用process.nextTick()。以上便是在 Node 中的几种不涉及异步 I/O 的异步 API。但这几种 API 具体在事件循环中又是一个什么执行顺序？继续往下看，please。先来一段分割线。。。 Event Loop当 Node 启动时，便会初始化 event loop，每一个 event loop 都包含六个循环阶段。看下图： timers 阶段：在这个阶段执行定时器预定的 callback，比如setTimeout(callback)和setInterval(callback)。 I/O callbacks 阶段：除其他阶段以外的 callback。 idle，prepare 阶段：仅 node 内部使用。 poll 阶段：获取新的 I/O 事件，适当条件下阻塞。 check 阶段：执行setImmediate()设定的 callback。 close callback 阶段：close 的 callback。每一个阶段都有各自相对应的队列，当 event loop 运行到指定阶段，node 将从对应的队列取出 callback 执行，当队列中的 callback 执行完或者超过该阶段的上限，event loop 会转入下一个阶段。注意:process.nextTick()不在上面任何一个阶段。 setTimeout and setImmediatesetTimeout在 poll 阶段空闲，且设定事件到达后执行，在 timer 阶段执行。setImmediate在 poll 阶段完成后进入 check 执行。二者调用顺序取决 event loop 上下文，在异步 I/O callback 之外调用，执行顺序不确定。 123456789101112setTimeout(() =&gt; &#123; console.log(&quot;setTimeout finished...&quot;);&#125;);setImmediate(function()&#123; console.log(&quot;setImmediate finished...&quot;);&#125;)//resultsetTimeout finished...setImmediate finished...也可能出现setImmediate finished...setTimeout finished... 在异步 I/O callback 中的调用顺序一定是先执行setImmediate后执行setTimeout： 1234567891011121314fs.readFile(&quot;./main/read.txt&quot;, () =&gt; &#123; //约5ms读取完毕 console.log(&quot;read file finished...&quot;); setTimeout(() =&gt; &#123; console.log(&quot;setTimeout finished...&quot;); &#125;); setImmediate(function () &#123; console.log(&quot;setImmediate finished...&quot;); &#125;)&#125;)//resultread file finished...setImmediate finished...setTimeout finished... 是因为异步 I/O callback 是在 poll 阶段执行，执行完毕后进入到 check 阶段执行setImmediate，后进入到 timer 阶段执行setTimeout。 Poll 阶段poll 阶段是整个 event loop 比较重要的阶段。在 node.js 中，任何异步方法（除 timer，closer，setImmediate）完成时，都会将其 callback 加到 poll queue，并立即执行。当 event loop 进入 poll 阶段，分两种情况： 有 timer：在有 timer 的情况下，如果 poll 的队列中没有任何待处理的事件，就会检查 timer 队列中有没有已经到了时间需要执行的事件，如果至少有一个，那么 event loop 将按照循环顺序进入 timer 阶段执行 timer 队列。 没有 timer：在没有 timer 的情况下，如果 poll 队列中有待处理的事件，则依次执行，直到队列为空，或者执行的 callback 到达系统上限。当 poll 队列为空，则会判断是否有setImmediate()设置的 callback，如果存在则结束 poll 阶段，马上进入 check 阶段执行 check 队列中的事件；如果没有setImmediate()设置的 callback，则 event loop 会阻塞在 poll 阶段，死等，直到有 callback 加入队列。看下面两段代码： 1234567891011121314fs.readFile(&quot;./main/read.txt&quot;,()=&gt;&#123; //约5ms读取完毕 console.log(&quot;read file finished...&quot;);&#125;)setTimeout(() =&gt; &#123; console.log(&quot;setTimeout finished...&quot;);&#125;);setImmediate(function()&#123; console.log(&quot;setImmediate finished...&quot;);&#125;)//resultsetTimeout finished...setImmediate finished...read file finished... 在执行到 poll 阶段的时候，已经有设置过的 timer，而且此时 poll 阶段的队列为空，而 timer 的队列中已经有待执行的 callback，则马上结束 poll 阶段按顺序执行进入到 timer 阶段，这里有setTimeout(callback)和setImmediate(callback)的回调顺序取决 event loop 上下文确定，也就是说它俩的执行先后顺序不确定。多执行几次说不定会出现先执行setImmediate(callback)的回调事件。 1234567891011121314fs.readFile(&quot;./main/read.txt&quot;,()=&gt;&#123; //约5ms读取完毕 console.log(&quot;read file finished...&quot;);&#125;)setTimeout(() =&gt; &#123; console.log(&quot;setTimeout finished...&quot;);&#125;,6);setImmediate(function()&#123; console.log(&quot;setImmediate finished...&quot;);&#125;)//resultsetImmediate finished...read file finished...setTimeout finished... 在执行到 poll 阶段的时候，此时文件还未读取完毕，所以 poll 阶段的队列为空，虽然已经有设置过的 timer，时间未到，timer 队列中没有待处理的事件，此时有setImmediate(callback)设置的回调，则马上结束 poll 阶段进入 check 阶段执行 callback，该轮 event loop 结束后进入到下一次 tick，timer 队列依旧为空，进入到 poll 阶段，此时文件读取完毕，回调函数被当作事件进入到 poll 队列，执行该事件后，timer 中的 callback 已经到时间执行，则马上按顺序进入到 timer 阶段执行队列中的事件。 process.nextTick()之前提到process.nextTick()不属于任何一个阶段，那它什么时候执行？process.nextTick()是在各个阶段切换的中间执行，也就是说是从一个阶段切换到下一个阶段这个间隙执行。 123456789101112131415161718192021222324fs.readFile(&quot;./main/read.txt&quot;,()=&gt;&#123; //约5ms读取完毕 console.log(&quot;read file finished...&quot;);&#125;)setTimeout(() =&gt; &#123; console.log(&quot;setTimeout finished...&quot;);&#125;);setImmediate(function()&#123; console.log(&quot;setImmediate finished...&quot;);&#125;)process.nextTick(function()&#123; console.log(&quot;next tick....1&quot;);&#125;);process.nextTick(function()&#123; console.log(&quot;next tick....2&quot;);&#125;);//resultnext tick....1next tick....2setTimeout finished...setImmediate finished...read file finished... 上面代码中从 timer 阶段进入下个阶段间隙执行process.nextTick()，上面提到过process.nextTick()的回调函数是保存在数组中，一次性取出全部执行。process.nextTick()是早起 Node 版本无setImmediate()时的产物，node 作者推荐尽量使用setImmediate()。这是为啥子呢？试想，如果我们在一个递归中无限循环调用process.nextTick()，那是不是其他阶段的 callback 则没有机会执行了呢？而setImmediate()就不一样，只在 check 阶段，而且每次从队列中只取出一个事件执行，那这样大家都有机会执行了，能分到一杯羹。。ps:啊哈哈哈,不知道为啥此刻脑子想到某个港剧中几个大佬抢地盘的场景。以上所有便是 Node 中事件循环的整个过程。 ps:参考朴灵的《深入浅出》和 https://cnodejs.org/topic/57d68794cb6f605d360105bf]]></content>
      <categories>
        <category>程序员</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nodejs从入门到放弃（二）]]></title>
    <url>%2F2018%2F12%2F18%2Fnodejs%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[在Node中异步I/O是何等份量大伙多多少少应该知道点，没吃过猪肉难道还没见过猪跑么？Node虽然是单线程，但这里的单线程仅仅只是Javascript执行在单线程中罢了。在Node中无论是何种平台，内部完成I/O任务的另有线程池。如下图所示： 那Node是如何实现异步I/O的呢？我们先看看其他内容，转移下注意力。 事件循环在进程启动时，Node会创建一个类似while(true)的循环，每次循环的过程我们称之为Tick。这个过程是为了检查是否有事件待处理，如果有则取出事件及相关的回调函数并执行，然后再进入下一个循环直到没有需要处理的事件则退出进程。如下图所示： 观察者在每个Tick的过程中，如何判断是否有待处理的事件呢？那么就需要观察者登场啦。🎉🎉🎉在每个事件循环中都会有一个或者多个观察者，判断是否待处理的事件就是向观察者询问是否有要处理的事件。就像咱们下馆子一样，馆子的厨房一遍一遍的做菜，厨房就是事件循环。那么他们做什么样的菜就需要询问服务员，服务员会告诉厨房有没有要做的菜，这里服务员便是观察者。具体做什么样的菜，就是咱们这些下馆子的人来决定的。 请求对象一般，非异步回调函数是有我们自行调用。如下所示：12345function processEvt(list, callback) &#123; for (var i = 0; i &lt; list.length; i++) &#123; callback(list[i], i, list); &#125;&#125; 但对于Node的异步I/O调用而言，回调函数却不是我们开发者来调用，那么我们发出调用到回调函数被执行，这中间发生了什么呢？事实上，从JavaScript发起调用到内核执行完I/O操作的过渡过程中，存在一种中间产物，这就是请求对象。下面以fs.open() 举例，探索Node与底层之间如如何执行异步I/O调用以及回调函数是如何被调用执行的。123fs.open(&apos;./files/test.txt&apos;,&apos;a&apos;,(err,fd)=&gt;&#123; //各种操作&#125;); 那fs.open()方法内部是什么样呢？1234fs.open = function (path, flags, mode, callback) &#123; //...... binding.open(pathModule._makeLong(path), stringToFlags(flags), mode, callback);&#125; 从这两段代码中不难看出来JavaScript层面的代码通过node核心模块，核心模块调用C++内建模块，内建模块又会做什么呢？看下图：内建模块会通过libuv进入系统调用，这也是Node里最经典的调用方式。将libuv作为封装层，有两个平台的实现，实质上都是调用了uv_fs_open()方法，在uv_fs_open()的调用过程中，我们创建一个FSReqWrap请求对象，会把从JavaScript传入的参数和当前方法都封装在这个请求对象中，注意：回调函数会被设置在这个请求对象的oncomplete_sym属性上。请求对象包装完毕后，在windows下，调用QueueUserWorkItem()方法将FSReqWrap这个请求对象推入到线程池中等待执行。QueueUserWorkItem()方法接受三个参数，第一个参数是将要执行的方法的引用，第二个参数是方法运行时所需要的参数，第三个参数是执行的标识。当线程池中有可用线程时，我们会调用传入的方法，根据参数调用底层相应的函数。至此，JavaScript调用就可以返回了，由JavaScript层面发起的异步调用第一阶段就结束了。JavaScript线程可以继续执行当前任务的后续操作，当前的I/O操作在线程池中等待执行，不管它是否阻塞I/O，都不会影响JavaScript线程的后续执行，如此便达到了异步的目的。请求对象是异步I/O过程中最重要的中间产物，因为所有状态都保存在这个对象中，包括送入线程池等待执行以及操作完毕后的回调处理。 执行回调线程池中的I/O操作调用完毕后会将结果储存在某个属性上，通过调用PostQueuedCompletionStatus()通知IOCP，告知当前对象操作已经完成，并将线程归还线程池。我们通过GetQueuedCompletionStatus()提取。在这个过程之，我们会调用事件循环的I/O观察者，在每次Tick的执行中，它会调用GetQueuedCompletionStatus()方法检查线程中是否有执行完的请求，如果存在，则会把请求对象加入的I/O观察队列中，将其当作事件处理。I/O观察者回调函数的行为就是取出请求对象的结果属性作为参数，取出oncomplete_sym属性作为方法并执行。 以上便是整个异步I/O的流程，看图：那么读到这里，有没有醍醐灌顶？原来这就是Node中异步I/O的整个过程。回到Node是如何实现异步I/O的问题，聪明如我的小伙伴们应该知道答案了吧。事件循环、观察者、请求对象、I/O线程池共同构成了Node异步的基本要素。 ps:参考朴灵的《深入浅出》]]></content>
      <categories>
        <category>程序员</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[白夜行]]></title>
    <url>%2F2018%2F12%2F13%2F%E7%99%BD%E5%A4%9C%E8%A1%8C%2F</url>
    <content type="text"></content>
      <categories>
        <category>书迹</category>
      </categories>
      <tags>
        <tag>东野圭吾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[理解Symbol类型]]></title>
    <url>%2F2018%2F12%2F10%2F%E7%90%86%E8%A7%A3Symbol%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[Symbol是es6新增的原始数据类型，表示独一无二的值。Symbol是通过Symbol()函数生成。12let s=Symbol();typeof s //&quot;symbol&quot; 变量s是一个独一无二的值，是Symbol数据类型。【未完待续】]]></content>
      <categories>
        <category>程序员</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[隔壁家的小胖子]]></title>
    <url>%2F2018%2F12%2F07%2F%E9%9A%94%E5%A3%81%E5%AE%B6%E7%9A%84%E5%B0%8F%E8%83%96%E5%AD%90%2F</url>
    <content type="text"><![CDATA[前天晚上照常和我妈打电话，她说隔壁家的小胖子终于出现了。隔壁家的小胖子是我们从小玩到大的小伙伴，准确点说是和我弟弟从小玩到大。和我么，只是小时候一起玩过。小时候在三哥的带领下，我们会一起欺负小胖子，小胖子真的很胖，胖到他的裤裆总是隔三岔五的撕破。小胖子却怪裤子质量不结实，他奶奶给他缝好好他会再次撕破，他会怪奶奶买的针线质量差。最后一次见他是2014年过年，我弟弟带他来我们家睡觉，他说爹妈又去赌博场了，他一个人在家害怕。我爸特别喜欢逗他，总是说要给他介绍外地媳妇。每次我爸说这事的时候他都会问“这次又是哪里的姑娘？”。小胖子可以在前一秒和你说话，下一秒就顺利进入梦乡还带着打呼噜声，任你怎么叫都叫不醒。吃的特多，还总嚷嚷着要减肥。又特别爱睡觉。小胖子是家里的独生子，和我弟弟年龄一样大，又是隔壁，从小一起长大，所以小胖子和我弟弟关系特别好。至于他爹妈为什么不给他生个弟弟妹妹的，我猜可能是要留着钱赌博吧。后来小胖子消失了，准确的说他全家都消失了，没有任何消息。他们家被人泼的红油漆，门口写的“欠债还钱，天经地义”，家里的窗户也被砸破了。听说是因为父母赌博欠下高利贷，还不起了。只能玩失踪。不再现身。就这样，小胖子跟着父母逃亡了几年。我不知道是不是真的逃亡，可能是躲在某个地方偷摸的生活着呢。他现在出现了，联系我弟弟，他说“这些年不管怎么换手机怎么删联系人，永远留着我弟弟的手机号”。幸运的是我弟弟他也一直不换号码。所以小胖子能再次联系上我弟弟。小胖子说这些年的日子已经足够他想清楚了，不管怎么埋怨父母，怎么怨恨都改不了任何事实。他只能接受。现在能做的就是慢慢打工，攒点钱，让以后的日子好过一些。我妈说小胖子瘦了，不再似以前那么肥嘟嘟的。我想经历这些事人都会变的。没有人会一直生活在天真无邪的年纪，有这样的人是因为他还没经历到能让他改变的事。真希望小胖子以后的生活能越过越好，摊上这样的父母你真没办法。唯一能做的是让自己越来越好。]]></content>
      <categories>
        <category>心情</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nodejs从入门到放弃（一）]]></title>
    <url>%2F2018%2F11%2F15%2Fnodejs%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[年初就买了一本《深入浅出node.js》，一直拖到现在才看，为自己的拖延症汗颜。不为自己懒惰找借口。 CommonJs的规范 通过require引用模块 模块定义：一个文件就是一个模块 模块标识：传递给require方法的参数名必须是小驼峰命名的字符串或相对路径、绝对路径。 NodeJs如何实现CommonJs规范?先看下面这段代码，有没有考虑过为什么直接可以调用require方法？为什么只有通过exports属性导出方法？module是什么？module和exports是什么关系？123456789101112131415var fs=require(&apos;fs&apos;);// console.log(module.paths);//模块定义function read()&#123; fs.readFile(&apos;readme.md&apos;,function(err,file)&#123; console.log(&apos;read finished...&apos;); &#125;) console.log(&apos;read start...&apos;);&#125;function write()&#123; console.log(&quot;write&quot;);&#125;module.exports.readFiles=read;module.exports.writeFiles=write; 实际上，在编译过程中，Node对获取的js文件内容会有一个封装，怎么封装？就是在内容头部加(function(require,exports,module,__dirname,__filename){/n,尾部会加上})/n。也就是说我们能用的require,exports,module,dirname,filename都是通过参数传递进来的。封装后，每个模块都有了隔离的作用域。包装之后的代码通过原生模块vm的runInThisContext()方法得到一个具体的function对象，把当前文件的exports,module,require，路径以及完整路径传递给这个function，返回exports以及挂在这个属性的方法和属性。所以我们只能访问到exports上的属性和方法，其余未挂在这个对象上的则不能访问。看下面这段代码：1234567891011function Module(id, parent) &#123; this.id = id; this.exports = &#123;&#125;; this.parent = parent; if (parent &amp;&amp; parent.children) &#123; parent.children.push(this) &#125; this.filename = null; this.loaded = false; this.children = [];&#125; 在Node中每个文件都是一个对象。Module就是模块本身。从上面代码不难看出exports是module的属性，这意味着我们可以用module.exports.readFiles=read;或者exports.readFiles=read;的方式导出方法或属性。可能又会有好奇宝宝问为什么用exports.readFiles=read的方式，而不是exports=read的方式？因为exports是作为形参传入，直接赋值形参是不会改变方法以外的exports的内容。来，看看下面这段代码有木有些许明白了呢？123456var a=10;function change(a)&#123; a=20;&#125;change(a);console.log(a) //10 以上奏是NodeJs对CommonJs规范的实现。 ps:参考朴灵的《深入浅出》]]></content>
      <categories>
        <category>程序员</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于JavaScript类型转化]]></title>
    <url>%2F2018%2F11%2F13%2F%E5%85%B3%E4%BA%8EJavaScript%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%8C%96%2F</url>
    <content type="text"><![CDATA[JavaScript类型转化分隐式转化和显式转化。在JavaScript中类型转化只能转化为三种基本类型： to string to number to boolean to string所有调用String显式转化为string类型的都可以得到你想要的结果。当遇到操作符+号，其中一个操作数为string类型，另一个操作数则会隐式转化为string类型。1234567String(1) //显式转换 &apos;1&apos;String(1.2) //显式转换 &apos;1.2&apos;String(null) //显式转换 &apos;null&apos; String(undefined) //显式转换 &apos;undefined&apos; String(true) //显式转换 &apos;true&apos;String(false) //显式转换 &apos;false&apos;1+&apos;&apos; //隐式转换 操作符+号 且其中一个操作数为string类型。结果&apos;1&apos; to number调用Number显式转化为number类型。隐式转化的情况有以下几种： 比较操作符（&lt;,&gt;,&lt;=,&gt;=） 按位操作符（| &amp; ^ ~） 四则运算 （- + * / %） 其中操作符为+号，一方操作数为string类型，则不会隐式转化为number类型。 一元操作符 （+） loose equality operator == ，也包括!= （不知道loose equality应该翻译成啥样的词。大意就是判断是否相等，只比较值，不考虑type是否相等。）1234567Number(&apos;&apos;) // 0Number(null) // 0Number(undefined) // NaN Number(&apos;12&apos;) // 12 Number(&apos;12s&apos;) // NaN Number(true) // 1Number(false) // 0 注意：虽然Number(null)为0，但null==0为false，null==undefined为true。NaN不等于任何值，包括它自己 to boolean调用Boolean显示转化为boolean，或者遇到逻辑操作符(|| &amp;&amp; !) 则会隐式转化为boolean类型。除了以下几种情况转为false，其他则为true。1234567Boolean(&apos;&apos;) // false Boolean(0) // false Boolean(-0) // false Boolean(null) // falseBoolean(undefined) // falseBoolean(NaN) // false Boolean(false) // false 即使是[]或者{}对象，也会转化为true123Boolean(&#123;&#125;) // trueBoolean([]) // trueBoolean(function() &#123;&#125;) // true 以上为基本类型显式或隐式转化。 Object convert to Number or StringObject 依然只能转化为number、string和boolean 三种基本类型。 Object转化为boolean最简单，永远为true.即使为空对象或者空数组等。 Object转化为stirng或者number，通过调用一个内置方法[[ToPrimitive]]实现转化。代码如下：1234567891011121314151617181920212223242526272829function ToPrimitive(input, preferredType)&#123; switch (preferredType)&#123; case Number: return toNumber(input); break; case String: return toString(input); break default: return toNumber(input); &#125; function isPrimitive(value)&#123; return value !== Object(value); &#125; function toString()&#123; if (isPrimitive(input.toString())) return input.toString(); if (isPrimitive(input.valueOf())) return input.valueOf(); throw new TypeError(); &#125; function toNumber()&#123; if (isPrimitive(input.valueOf())) return input.valueOf(); if (isPrimitive(input.toString())) return input.toString(); throw new TypeError(); &#125;&#125; 一般来说，转化的过程如下： input为基本类型，啥也不做直接return。 调用input.toString(),结果为基本类型，return。 调用input.valueOf()，结果为基本类型，return。 不满足以上三点则抛出TypeError.转化为number，则先调用valueOf(),再调用toString();转化为string，则正好相反，先toString(),再valueOf()。不同操作符会触发不同转化规则，根据参数preferredType要么转化为number要么是string。注意：遇到==和+操作符，preferredType未赋值或者等于默认值时，则默认转为number，除了Date。 var obj = { prop: 101, toString(){ return &apos;Prop: &apos; + this.prop; }, valueOf() { return this.prop; } }; console.log(String(obj)); // &apos;Prop: 101&apos; console.log(obj + &apos;&apos;) // &apos;101&apos; console.log(+obj); // 101 console.log(obj &gt; 100); // true /** Date测试 */ let d=new Date(); let str=d.toString(); let num=d.valueOf(); console.log(d==str) //true console.log(d==num) //false 参考链接：https://medium.freecodecamp.org/js-type-coercion-explained-27ba3d9a2839]]></content>
      <categories>
        <category>程序员</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生命]]></title>
    <url>%2F2018%2F10%2F29%2F%E7%94%9F%E5%91%BD%2F</url>
    <content type="text"><![CDATA[弟弟突然打电话让我帮忙给他朋友买张回家的票。我认识这个99年出生的姑娘，一直打趣说是弟弟的女朋友。因为她也说过要嫁给我弟弟的话。许多年以后她会不会觉得自己年少无知竟然说出这么荒唐的话呢？姑娘家里还有个正在读初中的妹妹，不知道什么原因跳楼了。显然，“不死也废”这话不是没有道理的，她妹妹下巴缝了三十多针，脊椎骨断了，此生断不可能再站起来了，这一生算是废了。正值花季，却干了这么荒唐的事，不知道醒来后的妹妹会不会后悔？会不会在夜深人静的时候痛苦不已？想必会的。我想不出来以后她们一家该怎么过？我没法想。姑娘的一生毁了，父亲也摔断了腿，家里全靠母亲以及自己打工挣钱，昂贵的医药费必然让她们望而却步。我真的难受，真的心疼。我不知道到底是在心疼别人还是心疼我自己？我自己的父亲也摔了，是他自己任性妄为造成的。他必然是后悔的，因为我见他流泪了。他哭了，他想不明白怎么会变成这样？我想在梦里他一定会想回到以前，那个活蹦乱跳的自己。当然，那是不可能了。因为我也经常在梦里梦到那个活蹦乱跳的父亲。用活蹦乱跳形容自己的父亲或许不合适，但他就是这样的一个小孩子。再也回不去了。身体每一个受伤的部分都会留下疤痕的。父亲身体里埋了三个管，这三根管会永远陪着他，脑袋缺失的那块头骨也永远不会再回来了。每当想到这些，真的灰常心疼难受。我一直以为自己是一个狠心的人，或许我一直试图做一个狠心的人，却没办法对周遭这一切置之不顾。生命真的很脆弱，稍不留神就溜走了。]]></content>
      <categories>
        <category>心情</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小小小小的火]]></title>
    <url>%2F2018%2F10%2F16%2F%E5%B0%8F%E5%B0%8F%E5%B0%8F%E5%B0%8F%E7%9A%84%E7%81%AB%2F</url>
    <content type="text"><![CDATA[“永远记得，你呼吸着的每一个瞬间，都应该去过你真正想要的生活。”我现在的生活是我真正想要的么？无数次问过我自己，终究没有得到答案。我想其实我自己也不知道。伊奇一把火烧了房子，在父母兄弟姐妹眼里，她就是一个疯子。米娅是理查德森家的房客，带着女儿珀尔一起住进了从理查德森家租来的房子。米娅声称自己是一名艺术工作者，只不过偶尔为了生活需要去超市、餐馆等地方做兼职。每在一个地方完成一副艺术作品，立马带着女儿搬家去到一个新地方。寻找灵感，继续艺术工作。在这样的环境下，珀尔多么渴望拥有一个属于自己的房间，可以永远的住下去。珀尔不敢交朋友，不敢对一个地方产生感情，因为她知道过不了多久，母亲完成作品就会带着她离开。当母亲告诉她，她们可以永远住在从理查德森家租的房子里，不用再搬家了。终于可以在一个地方长久的住着，是一件多么令人开心的事情，珀尔想着。]]></content>
      <categories>
        <category>书迹</category>
      </categories>
      <tags>
        <tag>伍绮诗</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的slider组件]]></title>
    <url>%2F2018%2F10%2F10%2F%E6%88%91%E7%9A%84slider%E7%BB%84%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[断断续续写了差不多两周，终于搞定了。写的比较简单，先看效果图。开始我想的太简单了，总认为用jquery的slider就可以搞定。实际上自己写的一套完整组件怎么能用jquery呢？尝试用原生JavaScript搞定。整个组件分为三块：灰色背景条、左侧绿色背景条以及拖拽的结点。在拖拽的结点上绑定mousedown事件，再拖拽的时候全局注册mouseto事件，mouseup的时候移除全局注册的事件。部分代码如下：123456mousedown: function(event) &#123; event.preventDefault(); this.onDragStart(event); window.addEventListener("mousemove", this.onDraging); window.addEventListener("mouseup", this.onDragEnd); &#125;, 在拖拽的过程中要随时计算当前的位置。12345678910onDraging: function(event) &#123; if (this.draging) &#123; let clientX = event.clientX; //compute the diff of draging. let diff = ((clientX - this.startX) / this.sliderSize) * 100; this.resetSliderSize(); this.newPosition = this.startPosition + diff; this.setPosition(this.newPosition); &#125; &#125; 最关键的点是如何计算当前的位置，首先拖拽到的新位置一定是在[0-100]范围，一定要排除其他乱七八糟的位置。我们把结点当作一个人，拖拽就是走路。先计算出我们每走一步有多长，得出lengthPerSteps。我们已经走了多长的路也就是对应newposition，通过newPostion / lengthPerSteps计算出我们走了多少步。（走的步数*每一步的长度*单位值+最小值）的出来的value是对应的slider的value。12345678910111213141516setPosition: function(newPostion) &#123; if (newPostion &lt; 0) &#123; newPostion = 0; &#125; else if (newPostion &gt; 100) &#123; newPostion = 100; &#125; //compute the length of one step. let lengthPerSteps = 100 / ((this.max - this.min) / this.steps); //the counts of step let steps = newPostion / lengthPerSteps; //get value,means current position let value = steps * lengthPerSteps * (this.max - this.min) * 0.01 + this.min; this.value = value.toFixed(0); this.oldValue = value; &#125; 拖拽完成后移除全局注册的事件。完整代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126&lt;template&gt; &lt;div class="m-slider" ref="slider"&gt; &lt;div class="m-slider__left" :style="barStyle" @click="onClickJump"&gt;&lt;/div&gt; &lt;div class="m-slider__background" @click="onClickJump"&gt;&lt;/div&gt; &lt;div class="m-slider__wrapper" @mousedown="mousedown" :style="&#123;left:currentPosition&#125;"&gt; &lt;div class="m-slider__wrapper--point"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import "./Slider.css";export default &#123; name: "MSlider", props: &#123; defalutValue: &#123; type: Number, default: 0 &#125;, isVertical: &#123; //if the slider is vertical type: Boolean, default: false &#125;, steps: &#123; type: Number, default: 1 &#125;, min: &#123; type: Number, default: 0 &#125;, max: &#123; type: Number, default: 100 &#125; &#125;, data() &#123; return &#123; vertical: false, draging: false, startX: 0, startPosition: 0, newPosition: 0, oldValue: this.defalutValue, value: this.defalutValue, sliderSize: 1 &#125;; &#125;, computed: &#123; currentPosition: function() &#123; return `$&#123;((this.value - this.min) / (this.max - this.min)) * 100&#125;%`; &#125;, barStyle: function() &#123; return &#123; width: this.currentPosition, top: 0 &#125;; &#125; &#125;, methods: &#123; mousedown: function(event) &#123; event.preventDefault(); this.onDragStart(event); //register event window.addEventListener("mousemove", this.onDraging); window.addEventListener("mouseup", this.onDragEnd); &#125;, onDragStart: function(event) &#123; this.draging = true; //start draging this.startX = event.clientX; //get start clientX this.startPosition = parseFloat(this.currentPosition);//convert the string to number this.newPosition = this.startPosition; &#125;, onDraging: function(event) &#123; if (this.draging) &#123; let clientX = event.clientX; //compute the diff of draging. let diff = ((clientX - this.startX) / this.sliderSize) * 100; this.resetSliderSize(); this.newPosition = this.startPosition + diff; this.setPosition(this.newPosition); &#125; &#125;, onDragEnd: function(event) &#123; this.draging = false; window.removeEventListener("mousemove", this.onDraging); window.removeEventListener("mouseup", this.onDragEnd); &#125;, onClickJump: function(event) &#123; let offsetLeft = this.$refs.slider.getBoundingClientRect().left; this.setPosition(((event.clientX - offsetLeft) / this.sliderSize) * 100); &#125;, setPosition: function(newPostion) &#123; if (newPostion &lt; 0) &#123; newPostion = 0; &#125; else if (newPostion &gt; 100) &#123; newPostion = 100; &#125; //compute the length of one step. let lengthPerSteps = 100 / ((this.max - this.min) / this.steps); //the counts of step let steps = newPostion / lengthPerSteps; //get value,means current position let value = steps * lengthPerSteps * (this.max - this.min) * 0.01 + this.min; this.value = value.toFixed(0); this.oldValue = value; &#125;, resetSliderSize: function() &#123; this.sliderSize = this.$refs.slider[ `client$&#123;this.vertical ? "Height" : "Width"&#125;` ]; &#125; &#125;, mounted() &#123; this.resetSliderSize(); window.addEventListener("resize", this.resetSliderSize); &#125;, beforeDestroy() &#123; window.removeEventListener("resize", this.resetSliderSize); &#125;&#125;;&lt;/script&gt;]]></content>
      <categories>
        <category>程序员</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>组件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[被嫌弃的松子的一生]]></title>
    <url>%2F2018%2F10%2F08%2F%E8%A2%AB%E5%AB%8C%E5%BC%83%E7%9A%84%E6%9D%BE%E5%AD%90%E7%9A%84%E4%B8%80%E7%94%9F%2F</url>
    <content type="text"><![CDATA[国庆放假看完了中岛哲也导演的《被嫌弃的松子的一生》。不由的想到我的一生会是怎么样呢？每个人的一生会过的怎么样都会和自己的性格有关系吧。性格怎么养成又和所成长的环境有莫大的关系。松子看着父亲总是因为小妹的病情一筹莫展，更加觉得父亲喜爱小妹胜过自己，故而总是想讨得父亲的欢心。突然发现自己扮丑可以令父亲开怀大笑，总是这样做以讨父亲欢心。我又想到了太宰治写的《人间失格》中叶藏亦是如此，因为童年的遭遇总是假装幽默风趣以博得周围人的笑容。我呢？我也是这样的吧。我不想笑，我也会假装很开心。以至于大家都会认为我幽默风趣，开朗活泼。也就只有我自己知道我是一个什么德行。看到松子因为小时候缺爱以至于长大后一直在寻找被爱的感觉。尽管一直被伤害，她也不想放弃的。第一个男朋友是一位作家，经常殴打她伤害她，甚至后来还在松子眼前自杀，松子也没想过去当浴室女郎。后来被男友对立面的作家骗的当了情妇，发现自己被利用就开始自暴自弃了。做过浴室女郎，后来又和一个搭讪自己的男人合伙做生意，被骗财骗色，杀了他。她觉得还是只有第一个男朋友最爱她，所以她要去找他，男朋友最喜欢的作家是太宰治，故而想去太宰治自杀的地方自杀，她说这样就可以找到那个最爱她的人了。却在去自杀的路上遇到了一个老实憨厚的理发师，理发师给了她爱，又决定跟着理发师安稳的度过下半辈子，却还是因为杀人罪被抓，八年后出狱回来找理发师却发现理发师已经结婚生子。自己心心念念的人儿，早已忘了她。只有她自己傻傻的还记着呢？或许当时心灰意冷了吧。松子还是走了，她不想打扰理发师的生活。亦或者她骄傲的自尊心不允许她这么做。后来以为可以和学生相守一生，没想到学生入狱，出来也和松子分手了。松子幡然醒悟，这世上不会有人爱她。在一条和家乡河流很相似的河流对岸租了一个房子。每天坐在那，看着夕阳西下，看着流动的河水，可能在想自己小时候的事情，亦或者在回顾自己的一生。松子一生都是在被骗被伤害，她只不过是想找到一个爱自己的人，她做错了什么？以至于最后都不再相信世上也会有人爱她，可是最爱她的还是她自己，她却不知道。她自暴自弃，每天窝在出租屋，吃着快餐喝着啤酒，发疯的时候在墙上写下了“生而为人，我很抱歉”的话。或许她是清醒的，只是不想再面对这样的生活。最后被一群小混混乱棍打死。松子她不爱惜自己，她的一生就变成这样了。我呢？曾经我也试图让周围的人开心，我把所有的不满委屈都深深的隐藏，总是担心别人对自己不满意，后来忍受不了就咬自己的胳膊。我想我是疯了。但我也有清醒的时候，我知道我的一生我不能这样，别人不是我的天，我有自己的生活，我们都要争取做最爱自己的人。我不想说“生而为人，我很抱歉”的话，或许不会轰轰烈烈，但至少安稳。]]></content>
      <categories>
        <category>心情</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中秋日记]]></title>
    <url>%2F2018%2F09%2F26%2F%E4%B8%AD%E7%A7%8B%E6%97%A5%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[娇娇在节前一天就约我放假后叫上贝贝一起玩密室逃脱，我应允了，我知道我自己放假不出门必然会窝在屋里玩游戏的。娇娇和贝贝是我刚毕业来北京工作的第一家公司的同事。刚来的时候谁都不认识，本就不是一个主动的人，当然不敢见谁都跑上去打招呼，总是一个人到处瞎溜达。刚来北京总是觉得北京的饭菜难吃的要命，所以每天自己做饭，做晚饭带中饭。其实一直到现在都觉得北京的饭菜难吃，只不过能凑合的吃了，也只是为自己不做饭找个借口罢了。娇娇和贝贝她们也是带饭队伍中的一员。当然，我也只是见到过她们，从来不会上去打招呼的。有天早上在公交车上碰到贝贝，一眼就在人群中认出了贝贝，为啥呢？眼缘很重要。可是我不敢上去拍她的肩膀说“hi”。我就这样悄无声息的错了一个搭讪的机会。上帝知道我不是一个主动的人，白白浪费了他为我俩创造的机会，估计恨铁不成钢啊，可是能怎么着呢？剧本安排我得跟着贝贝混，无奈又得为我俩创造一个认识的机会，可是这次的安排是让贝贝来搭讪我。事发在咱俩搬家到公司附近的同一个小区的一个早上，在上班路上又碰到了，咱俩一前一后的走着，她突然跑上去叫我的名字，我当然很诧异怎么会知道我名字呢？不过没问出口。咱俩有一搭没一搭的聊着一路走到了公司。特别清楚的记得那天中午贝贝叫我一块吃中饭，从那天开始我就跟着贝贝混了，每天中午一起吃饭，当然，还有娇娇，我们就成了饭友。每天中午都会聊着各种各样的趣事，大家一起捧腹大笑。我只能说她俩的笑点真低，把我的笑点也拉低了。我竟然觉得上班的日子也不是那么的百般无聊了，每天也会有一丝丝的小期待吃饭的时刻。因为我不在是一个人啦，我也有我的小伙伴了。后来贝贝离职后，只剩我和娇娇相依为命了。再到后来，我也离职了，只剩娇娇一个人孤苦无依了。尽管不在一起工作，但我们还是会相约在一起看星星看月亮。后来娇娇生了小耳朵，我们会相约在一起看耳朵，但这样的机会也屈指可数。在约好的时间内我没按时到，晚了几分钟，娇娇她们先去密室了，我到了之后直接进入第二关，看的她们还在第一关冥思苦想呢，虽然只隔着一扇铁门，我也要假象她们是来救我的。我在第二关摆弄着扑克牌，百般无聊就开始锤四面墙，忽然从头顶飘来一句警告“不要锤墙”，我了个怕啊，只能乖乖的等着娇娇她们来和我汇合。看着她们三互相推脱选谁来发求救信号，不管用了什么方式，总之成功的进入到了第二关，百万雄师过大江终于汇合啦。我压抑着内心的小激动，哎哟妈呀，终于来救我了。可是站在第二关面前，大家大眼瞪小眼，有点尴尬，又选谁来发求救信号呢？嗯。娇娇家的五花肉出场啦。得到答案后，五花肉那个捶胸顿足，为啥呢？因为我们离答案只差一步了。终于来了第三关了，研究半天也没找到答案拿到钥匙，没想到五花肉这货竟然把人锁在小盒子的钥匙给摇出来了，厉害的。欣喜若狂的拿着钥匙打开了另一个盒子。我也在旁边瞎捣鼓呢，竟然解开了密码，但是我不知道啊，最后贝贝发现了，成功又拿到了一个钥匙。接下来又该大眼瞪小眼了，到求救的时刻啦。嗯，反正最后我们是出来了。总结出来就是我们脑洞不够大。费了些许脑力，我们饿呀，在娇娇和五花肉的带领下，我吃到了久违许久的热干面。晚上自然是在娇娇家玩耍，我们商量着是玩扑克呢还是玩决门？决门是个啥呢？这事得从几年前开始说起，那是娇娇第一次玩三国杀，三国杀有张牌是决斗，牌面写的“決鬥”，娇娇理所当然的认为是“決门”。嗯，我当然憋住不笑。可是娇娇家的五花肉忍不住啊，他笑出了声。自此决门这个梗一直跟着娇娇。最终我们决定玩扑克牌。贝贝说不会玩，我们就慢慢教她，可是我发现她不止不会玩，她也不会放牌，她老是把牌放在我面前，我不想看都不行。自然我是不会输的。当然还有娇娇家的五花肉，他每次摸完牌都会说“尼玛”，还带着声调的拖着尾音的说，我们就知道他的牌不差，故意放烟雾弹给我们呢。他不仅给我们放烟雾弹，还放屁呢，用娇娇的话说这是在开拖拉机。其实我也想放屁，只是不好意思的放，用力的憋着，后来憋不住啦，索性就放出来了。隔着屏幕都能闻到浓浓的臭味。不想说了。睡醒后的第二天吃过早饭又接着玩扑克，吃火锅。开心的度过一天。但是贝贝却认为我们是堕落的度过了一天，她老是吵着要回家写代码，她是codegirl，love coding。记了这么久的流水账，只是想说和娇娇她们一起玩挺开心的，真的开心，因为不管说什么总是大家一起笑，虽然有时候我也不知道她们在笑什么，但看到她们笑我也想笑。最后临走时又厚着脸皮的在娇娇家抱走了两个大柚子。全剧终。]]></content>
      <categories>
        <category>心情</category>
      </categories>
      <tags>
        <tag>朋友</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1Q84]]></title>
    <url>%2F2018%2F09%2F17%2F1Q84%2F</url>
    <content type="text"><![CDATA[未完待续。]]></content>
      <categories>
        <category>书迹</category>
      </categories>
      <tags>
        <tag>村上春树</tag>
        <tag>科幻</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[秘密]]></title>
    <url>%2F2018%2F09%2F17%2F%E7%A7%98%E5%AF%86%2F</url>
    <content type="text"><![CDATA[未完待续。]]></content>
      <categories>
        <category>书迹</category>
      </categories>
      <tags>
        <tag>东野圭吾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[恶意]]></title>
    <url>%2F2018%2F09%2F17%2F%E6%81%B6%E6%84%8F%2F</url>
    <content type="text"></content>
      <categories>
        <category>书迹</category>
      </categories>
      <tags>
        <tag>东野圭吾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[时生]]></title>
    <url>%2F2018%2F09%2F17%2F%E6%97%B6%E7%94%9F%2F</url>
    <content type="text"><![CDATA[拓实夫妇在明知道基因缺陷病会遗传给孩子的情况下，坚持生下了时生。本抱着侥幸的心里希望时生能健健康康度过这一生，可天不遂人愿，时生终究还是住进了ICU，看着孩子躺在病床上的模样，拓实太太终究还是不敢问出来“有没有‘来到世上真好’的感觉？幸福吗？恨不恨我们？”，拓实告诉太太“时生不曾这样想过”。或许丽子认为这是拓实安慰她的话，但拓实他却说在他23岁的时候就遇到了儿子时生。拓实讲诉自己年轻的时候是一个游手好闲靠女人养活的混蛋，遇到儿子时生后，在时生的帮助下生活渐渐改善，性格受到诚实稳重的时生的影响也有所改变。我被父子之间的感情感染到了，书末时生在生命的尽头告诉父母“他并不后悔做父母亲的孩子，这19年来他过的很幸福”，我竟然潸然泪下。为什么？因为我从小就羡慕别人家有这样的父亲。我的父亲脾气暴躁，说他自私毫不为过。他总是认为自己是对的，绝不认为自己错。印象中一直对母亲动手。每每看到母亲被揍的毫无还手之力时，我对自己的无能为力感到不快。所以我对打女人的男人有深深的仇恨感，我恨不能杀之而后快。我的童年没有时生幸福，没有相亲相爱的一家人。随着年岁的渐长，仇恨感日见增多，或者我也是害怕的。不敢和父亲四目相对，总是在躲避他。高中时父亲对我说的最多的一句话就是“不准结交任何男同学”。但身处叛逆期的我怎么会如此听话呢？我偏要结交很多男同学。每次回家都会把手机通讯录的名单清理一遍，把号码誊写在小本本上，任由父亲检查翻看我的手机，一丁点蛛丝马迹都不留给你。当然，大学不会考到一个很好的大学，只能上一个三本本科。一年学费一万呢，但父亲依然坚持让我上。尽管其他叔叔伯伯都觉得没必要，可是我父亲的决定怎能轻易改变呢？即使他让我上了大学，也丝毫不减我对他的仇恨。我从不给他打电话，但是他每周都会给我打电话，我跟他也无话可说，基本都是他问我答，一直到我工作后，每周给我打电话的习惯都不变。可是我害怕呀，我不想接电话的，我不想面对他，但是如果我不接电话他就会骂我不感恩的白眼狼。很多年后我才明白那个时候他的心情，他只是不会表达，他只是担心我，如果我不接电话他就害怕我出事，所以会一直给我打电话直到我接，他只能通过骂我吼我才能缓解他对我的担心之情。现在换我每天给父母打电话，如果他们不接电话，我也会担心他们出事。只有接了电话才会觉得安心。我现在还恨父亲么？不恨了，早在他坚持让我上大学的时候我就不该恨他的。我应该早点知道他其实很关心我的。关心则乱这句话没错，所以他才会那么生气的吼我骂我，他不知道如何表达对我的关心。幸好现在还来得及，他没事了。往后余生，只希望父母健健康康平平安安相守一生。]]></content>
      <categories>
        <category>书迹</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>东野圭吾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1984]]></title>
    <url>%2F2018%2F09%2F12%2F1984%2F</url>
    <content type="text"><![CDATA[未完待续]]></content>
      <categories>
        <category>书迹</category>
      </categories>
      <tags>
        <tag>科幻</tag>
        <tag>乔治奥威尔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[原型]]></title>
    <url>%2F2018%2F09%2F12%2F%E5%8E%9F%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[【未完待续】]]></content>
      <categories>
        <category>程序员</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>原型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[夏天·烟火·我的尸体]]></title>
    <url>%2F2018%2F09%2F12%2F%E5%A4%8F%E5%A4%A9%C2%B7%E7%83%9F%E7%81%AB%C2%B7%E6%88%91%E7%9A%84%E5%B0%B8%E4%BD%93%2F</url>
    <content type="text"><![CDATA[洪啸老早就推荐我看这本书。最近才有时间看。看完之后突然想到曾经看到的一句话“恶之天真，天真之恶”。小孩子真的是很纯真的么？我不信。他们肯定也有邪恶的一面。只是他们不知道他们的这个行为会造成多么严重的后果。 书中的弥生在伸手推五月的时候，她应该没想过五月会这么被摔死。所以她害怕了。她不知所措。幸好她还有阿健，她的哥哥，她最喜欢的哥哥。所以她不容许别人也喜欢她的哥哥，就是因为五月偷偷告诉她喜欢阿健，她心里嫉妒，所以对五月伸出了魔掌，让五月从树上摔下去。 阿健和弥生一起藏五月的尸体，阿健说“别怕，有我在”。我想弥生会不会有那么一点庆幸？所以她和阿健才会能这么亲密。从头到尾，我都在怀疑，是不是我理解错了？弥生她不是读小学三年级，应该是读初中三年级或者更大。而阿健他不是小学六年级。可是作者明明白白的写着当暑假结束，弥生重新回到小学，她该上三年级了。 想起小时候的自己也干过一堆坏事。和隔壁小朋友一起玩跷跷板，故意让他捡一块砖头放在跷跷板那头，我在他放砖头到跷跷板那头时趁机踩下了跷跷板这头，我明知道我这一脚才下去，砖头会迎面拍在他脸上，但我还是踩了，我只想知道会把他拍成什么样，他哭了，鼻子一直在流血，而我却在哈哈大笑，后面的记不清了，只知道他再也没和我一起玩了。 现在回想起来，也没法理解当时为什么要这么做，只是觉得好玩吧，也不会觉得会把他拍成什么样，更加没想过“死”这个字眼，当然，很庆幸没有和这个字相关。]]></content>
      <categories>
        <category>书迹</category>
      </categories>
      <tags>
        <tag>黑乙一</tag>
      </tags>
  </entry>
</search>
